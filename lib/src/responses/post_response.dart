import '../enums.dart';
import '../utilities/helpers.dart';
import 'response_properties/author_meta.dart';
import 'response_properties/content.dart';
import 'response_properties/links.dart';

class Post {
  Post({
    this.id,
    this.date,
    this.dateGmt,
    this.password,
    this.guid,
    this.modified,
    this.modifiedGmt,
    this.slug,
    this.status,
    this.type,
    this.link,
    this.title,
    this.content,
    this.excerpt,
    this.author,
    this.featuredMedia,
    this.commentStatus,
    this.pingStatus,
    this.sticky,
    this.template,
    this.format,
    this.meta,
    this.categories,
    this.tags,
    this.links,
    this.featuredImageUrl,
    this.authorMeta,
    this.json,
  });

  factory Post.fromJson(dynamic json) {
    return Post(
      id: json['id'] as int?,
      date: parseDateIfNotNull(json['date']),
      dateGmt: parseDateIfNotNull(json['date_gmt']),
      guid: Content.fromJson(json['guid']),
      password: json['password'] as String?,
      modified: parseDateIfNotNull(json['modified']),
      modifiedGmt: parseDateIfNotNull(json['modified_gmt']),
      slug: json['slug'] as String?,
      status: getContentStatusFromValue(json['status'] as String?),
      type: json['type'] as String?,
      link: json['link'] as String?,
      title: Content.fromJson(json['title']),
      content: Content.fromJson(json['content']),
      excerpt: Content.fromJson(json['excerpt']),
      author: json['author'] as int?,
      featuredMedia: json['featured_media'] as int?,
      commentStatus: getStatusFromValue(json['comment_status'] as String?),
      pingStatus: getStatusFromValue(json['ping_status'] as String?),
      sticky: json['sticky'] as bool?,
      template: json['template'] as String?,
      format: getFormatFromValue(json['format'] as String?),
      meta: json['meta'],
      categories: mapIterableWithChecks<int>(
          json['categories'], (dynamic v) => v as int),
      tags: mapIterableWithChecks<int>(json['tags'], (dynamic v) => v as int),
      authorMeta: AuthorMeta.fromJson(json['author_meta']),
      featuredImageUrl: json['featured_image_url'] as String?,
      links: Links.fromJson(json['_links']),
      json: json as Map<String, dynamic>,
    );
  }

  final int? id;
  final DateTime? date;
  final DateTime? dateGmt;
  final Content? guid;
  final String? password;
  final DateTime? modified;
  final DateTime? modifiedGmt;
  final String? slug;
  final ContentStatus? status;
  final String? type;
  final String? link;
  final Content? title;
  final Content? content;
  final Content? excerpt;
  final int? author;
  final int? featuredMedia;
  final Status? commentStatus;
  final Status? pingStatus;
  final bool? sticky;
  final String? template;
  final PostFormat? format;
  final dynamic meta;
  final List<int>? categories;
  final List<int>? tags;
  final Links? links;

  /// Field generated by https://wordpress.org/plugins/rest-api-featured-image/ plugin
  final String? featuredImageUrl;

  /// Field generated by https://wordpress.org/plugins/wp-rest-api-user-meta/
  final AuthorMeta? authorMeta;

  final Map<String, dynamic>? json;

  Map<String, dynamic> toJson() {
    return <String, dynamic>{
      'id': id,
      'date': date?.toIso8601String(),
      'date_gmt': dateGmt?.toIso8601String(),
      'guid': guid?.toJson(),
      'password': password,
      'modified': modified?.toIso8601String(),
      'modified_gmt': modifiedGmt?.toIso8601String(),
      'slug': slug,
      'status': status?.name,
      'type': type,
      'link': link,
      'title': title?.toJson(),
      'content': content?.toJson(),
      'excerpt': excerpt?.toJson(),
      'author': author,
      'featured_media': featuredMedia,
      'comment_status': commentStatus?.name,
      'ping_status': pingStatus?.name,
      'sticky': sticky,
      'template': template,
      'featured_image_url': featuredImageUrl,
      'author_meta': authorMeta?.toJson(),
      'format': format?.name,
      'meta': meta,
      'categories': categories,
      'tags': tags,
      '_links': links?.toJson(),
    };
  }
}
