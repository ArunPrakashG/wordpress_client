import 'package:collection/collection.dart';
import 'package:meta/meta.dart';

import '../enums.dart';
import '../utilities/helpers.dart';
import '../utilities/self_representive_base.dart';
import 'properties/author_meta.dart';
import 'properties/content.dart';

@immutable
class Post implements ISelfRespresentive {
  const Post({
    required this.id,
    required this.slug,
    required this.status,
    required this.link,
    required this.author,
    required this.commentStatus,
    required this.pingStatus,
    required this.sticky,
    required this.format,
    required this.self,
    this.date,
    this.dateGmt,
    this.password,
    this.guid,
    this.modified,
    this.modifiedGmt,
    this.type,
    this.title,
    this.content,
    this.excerpt,
    this.featuredMedia,
    this.template,
    this.categories,
    this.tags,
    this.featuredImageUrl,
    this.authorMeta,
  });

  factory Post.fromJson(Map<String, dynamic> json) {
    return Post(
      id: castOrElse(json['id']),
      date: parseDateIfNotNull(castOrElse(json['date'])),
      dateGmt: parseDateIfNotNull(castOrElse(json['date_gmt'])),
      guid: castOrElse(
        json['guid'],
        transformer: (value) => Content.fromJson(value as Map<String, dynamic>),
      ),
      password: castOrElse(json['password']),
      modified: parseDateIfNotNull(castOrElse(json['modified'])),
      modifiedGmt: parseDateIfNotNull(castOrElse(json['modified_gmt'])),
      slug: castOrElse(json['slug']),
      status: getContentStatusFromValue(castOrElse(json['status'])),
      type: castOrElse(json['type']),
      link: castOrElse(json['link']),
      title: castOrElse(
        json['title'],
        transformer: (value) => Content.fromJson(value as Map<String, dynamic>),
      ),
      content: castOrElse(
        json['content'],
        transformer: (value) => Content.fromJson(value as Map<String, dynamic>),
      ),
      excerpt: castOrElse(
        json['excerpt'],
        transformer: (value) => Content.fromJson(value as Map<String, dynamic>),
      ),
      author: castOrElse(json['author']),
      featuredMedia: castOrElse(json['featured_media']),
      commentStatus: getStatusFromValue(castOrElse(json['comment_status'])),
      pingStatus: getStatusFromValue(castOrElse(json['ping_status'])),
      sticky: castOrElse(json['sticky']),
      template: castOrElse(json['template']),
      format: getFormatFromValue(castOrElse(json['format'])),
      categories: mapIterableWithChecks<int>(
        json['categories'],
        (dynamic v) => v as int,
      ),
      tags: mapIterableWithChecks<int>(json['tags'], (dynamic v) => v as int),
      authorMeta: castOrElse(
        json['author_meta'],
        transformer: (value) {
          return AuthorMeta.fromJson(value as Map<String, dynamic>);
        },
      ),
      featuredImageUrl: decodeByMultiKeys(
        json,
        ['featured_image_url', 'featured_media_src_url'],
      ),
      self: json,
    );
  }

  final int id;
  final DateTime? date;
  final DateTime? dateGmt;
  final Content? guid;
  final String? password;
  final DateTime? modified;
  final DateTime? modifiedGmt;
  final String slug;
  final ContentStatus status;
  final String? type;
  final String link;
  final Content? title;
  final Content? content;
  final Content? excerpt;
  final int author;
  final int? featuredMedia;
  final Status commentStatus;
  final Status pingStatus;
  final bool sticky;
  final String? template;
  final PostFormat format;
  final List<int>? categories;
  final List<int>? tags;

  /// Field generated by https://wordpress.org/plugins/rest-api-featured-image/ plugin
  final String? featuredImageUrl;

  /// Field generated by https://wordpress.org/plugins/wp-rest-api-user-meta/
  final AuthorMeta? authorMeta;

  @override
  final Map<String, dynamic> self;

  Map<String, dynamic> toJson() {
    return <String, dynamic>{
      'id': id,
      'date': date?.toIso8601String(),
      'date_gmt': dateGmt?.toIso8601String(),
      'guid': guid?.toJson(),
      'password': password,
      'modified': modified?.toIso8601String(),
      'modified_gmt': modifiedGmt?.toIso8601String(),
      'slug': slug,
      'status': status.name,
      'type': type,
      'link': link,
      'title': title?.toJson(),
      'content': content?.toJson(),
      'excerpt': excerpt?.toJson(),
      'author': author,
      'featured_media': featuredMedia,
      'comment_status': commentStatus.name,
      'ping_status': pingStatus.name,
      'sticky': sticky,
      'template': template,
      'featured_image_url': featuredImageUrl,
      'author_meta': authorMeta?.toJson(),
      'format': format.name,
      'categories': categories,
      'tags': tags,
    };
  }

  @override
  bool operator ==(covariant Post other) {
    if (identical(this, other)) {
      return true;
    }

    final collectionEquals = const DeepCollectionEquality().equals;

    return other.id == id &&
        other.date == date &&
        other.dateGmt == dateGmt &&
        other.guid == guid &&
        other.password == password &&
        other.modified == modified &&
        other.modifiedGmt == modifiedGmt &&
        other.slug == slug &&
        other.status == status &&
        other.type == type &&
        other.link == link &&
        other.title == title &&
        other.content == content &&
        other.excerpt == excerpt &&
        other.author == author &&
        other.featuredMedia == featuredMedia &&
        other.commentStatus == commentStatus &&
        other.pingStatus == pingStatus &&
        other.sticky == sticky &&
        other.template == template &&
        other.format == format &&
        collectionEquals(other.categories, categories) &&
        collectionEquals(other.tags, tags) &&
        other.featuredImageUrl == featuredImageUrl &&
        other.authorMeta == authorMeta &&
        collectionEquals(other.self, self);
  }

  @override
  int get hashCode {
    return id.hashCode ^
        date.hashCode ^
        dateGmt.hashCode ^
        guid.hashCode ^
        password.hashCode ^
        modified.hashCode ^
        modifiedGmt.hashCode ^
        slug.hashCode ^
        status.hashCode ^
        type.hashCode ^
        link.hashCode ^
        title.hashCode ^
        content.hashCode ^
        excerpt.hashCode ^
        author.hashCode ^
        featuredMedia.hashCode ^
        commentStatus.hashCode ^
        pingStatus.hashCode ^
        sticky.hashCode ^
        template.hashCode ^
        format.hashCode ^
        categories.hashCode ^
        tags.hashCode ^
        featuredImageUrl.hashCode ^
        authorMeta.hashCode ^
        self.hashCode;
  }

  @override
  String toString() {
    return 'Post(id: $id, date: $date, dateGmt: $dateGmt, guid: $guid, password: $password, modified: $modified, modifiedGmt: $modifiedGmt, slug: $slug, status: $status, type: $type, link: $link, title: $title, content: $content, excerpt: $excerpt, author: $author, featuredMedia: $featuredMedia, commentStatus: $commentStatus, pingStatus: $pingStatus, sticky: $sticky, template: $template, format: $format, categories: $categories, tags: $tags, featuredImageUrl: $featuredImageUrl, authorMeta: $authorMeta, self: $self)';
  }
}
